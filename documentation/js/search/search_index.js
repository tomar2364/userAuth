var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.264,1,1.646]],["body/modules/AppModule.html",[0,1.952,1,3.193,2,1.535,3,1.952,4,2.737,5,2.737,6,2.385,7,0.048,8,2.712,9,2.541,10,1.997,11,1.997,12,0.525,13,0.441,14,0.441,15,3.38,16,2.541,17,0.905,18,1.057,19,2.314,20,1.354,21,3.38,22,3.38,23,3.38,24,3.38,25,0.525,26,0.089,27,0.037,28,0.037]],["title/classes/Auth.html",[26,0.073,29,1.116]],["body/classes/Auth.html",[7,0.047,12,0.494,13,0.415,14,0.415,17,0.579,25,0.642,26,0.084,27,0.035,28,0.035,29,1.658,30,1.446,31,2.18,32,0.494,33,1.879,34,2.717,35,2.513,36,3.332,37,1.951,38,0.957,39,1.51,40,1.341,41,3.185,42,3.185,43,3.185,44,3.185,45,1.879,46,1.446,47,1.882,48,0.996,49,2.18,50,2.579,51,2.717,52,3.723,53,2.18,54,2.18,55,2.579]],["title/controllers/AuthController.html",[56,1.437,57,1.646]],["body/controllers/AuthController.html",[7,0.049,12,0.315,13,0.265,14,0.265,17,0.778,18,0.635,25,0.315,26,0.095,27,0.026,28,0.026,29,1.447,32,0.315,35,2.207,37,1.713,38,0.55,40,0.833,48,0.945,56,1.049,57,1.786,58,1.049,59,1.645,60,1.645,61,1.941,62,3.023,63,3.023,64,3.023,65,3.759,66,3.863,67,2.448,68,1.561,69,2.649,70,1.645,71,2.599,72,1.561,73,3.023,74,2.031,75,4.482,76,3.611,77,3.611,78,3.611,79,2.472,80,2.924,81,3.611,82,1.561,83,0.833,84,1.561,85,2.472,86,2.031,87,2.031,88,1.864,89,1.561,90,2.448,91,1.645,92,2.031,93,3.023,94,1.561,95,2.069,96,3.023,97,1.786,98,3.023,99,2.031,100,2.031,101,2.031,102,2.031,103,1.39,104,2.031,105,2.031,106,2.031,107,1.645,108,1.645,109,1.645,110,2.448,111,2.448,112,3.023,113,1.645,114,1.2,115,1.816,116,1.645,117,1.645,118,1.645,119,2.031,120,2.031,121,3.023,122,1.2,123,2.031,124,2.031,125,2.031,126,1.645,127,2.031,128,2.031,129,2.031,130,1.645,131,2.031,132,0.814,133,1.645,134,2.031,135,2.031,136,2.031,137,2.031,138,1.561,139,2.031,140,2.031,141,2.031]],["title/classes/AuthCredentialsDto.html",[26,0.073,71,1.437]],["body/classes/AuthCredentialsDto.html",[7,0.047,12,0.517,13,0.435,14,0.435,17,0.606,25,0.517,26,0.112,27,0.036,28,0.036,30,1.513,32,0.517,33,1.935,35,2.641,37,1.882,38,0.775,39,1.364,40,1.174,71,2.2,72,2.2,142,3.804,143,2.698,144,3.332,145,4.261,146,4.261,147,4.261,148,4.261,149,3.332,150,3.332,151,3.332,152,2.917,153,4.698,154,3.332,155,3.332,156,3.332,157,1.969,158,3.332,159,4.261,160,3.332,161,3.332]],["title/modules/AuthModule.html",[0,1.264,6,1.264]],["body/modules/AuthModule.html",[0,1.719,2,1.265,3,1.719,6,2.385,7,0.049,9,2.238,10,1.647,11,1.647,12,0.433,13,0.363,14,0.363,16,1.647,17,0.955,18,0.871,19,1.908,20,1.117,25,0.433,26,0.073,27,0.032,28,0.032,29,1.117,47,2.238,57,2.542,58,1.955,83,0.768,115,2.26,116,2.257,162,2.257,163,2.257,164,2.257,165,2.789,166,2.787,167,3.067,168,3.787,169,1.439,170,2.787,171,2.787,172,1.908,173,2.787,174,2.257,175,3.787,176,1.908,177,2.787,178,2.787,179,2.787,180,2.257,181,2.787,182,2.787,183,2.787,184,2.787,185,2.787,186,1.908,187,2.257,188,1.647]],["title/injectables/AuthService.html",[115,1.264,189,1.116]],["body/injectables/AuthService.html",[7,0.049,12,0.21,13,0.176,14,0.176,17,0.756,18,0.423,20,0.541,25,0.21,26,0.036,27,0.019,28,0.019,29,0.541,32,0.21,35,2.674,36,3.406,37,1.908,38,0.688,39,1.329,40,1.042,45,0.613,46,2.006,48,1.002,51,1.3,53,1.506,61,1.602,65,2.857,66,2.596,68,1.135,69,2.85,70,1.094,71,2.569,82,1.952,83,1.042,84,1.952,88,2.334,89,1.655,90,2.596,91,1.781,94,2.145,97,0.799,103,1.506,115,0.999,117,1.094,118,1.094,122,2.456,138,1.821,172,0.925,174,1.094,186,0.925,188,0.799,189,0.881,190,0.799,191,1.094,192,3.095,193,3.206,194,2.782,195,2.2,196,1.506,197,1.094,198,2.194,199,4.612,200,1.351,201,2.252,202,1.781,203,2.2,204,1.351,205,3.782,206,2.2,207,1.351,208,2.782,209,1.351,210,2.2,211,2.2,212,1.351,213,1.351,214,2.2,215,2.2,216,2.2,217,1.351,218,2.2,219,1.781,220,1.094,221,0.925,222,1.781,223,1.135,224,1.094,225,1.094,226,1.094,227,1.351,228,2.2,229,2.845,230,1.351,231,1.094,232,1.351,233,1.351,234,1.351,235,1.351,236,1.351,237,1.904,238,1.351,239,1.351,240,1.094,241,1.351,242,1.351,243,2.2,244,1.351,245,1.351,246,1.351,247,1.094,248,1.351,249,1.351,250,1.351,251,1.351,252,1.351,253,1.351]],["title/classes/CreateUserDto.html",[26,0.073,254,1.437]],["body/classes/CreateUserDto.html",[7,0.047,12,0.588,13,0.494,14,0.494,17,0.689,25,0.588,26,0.121,27,0.04,28,0.04,30,1.721,32,0.588,33,2.097,38,0.689,39,1.272,40,1.044,72,1.957,83,1.372,152,3.409,157,2.24,254,2.384,255,3.74,256,3.07,257,3.791]],["title/classes/GetUserFilterDto.html",[26,0.073,258,1.906]],["body/classes/GetUserFilterDto.html",[7,0.048,12,0.544,13,0.457,14,0.457,17,0.8,25,0.544,26,0.116,27,0.038,28,0.038,30,1.592,32,0.544,33,1.998,38,0.8,39,1.389,40,0.966,61,1.998,72,1.81,114,2.072,152,3.013,157,2.072,258,3.013,259,2.84,260,5.197,261,3.507,262,4.401,263,3.564,264,3.507,265,4.401,266,4.401]],["title/interfaces/JwtPayload.html",[223,1.437,267,1.646]],["body/interfaces/JwtPayload.html",[7,0.046,12,0.616,13,0.517,14,0.517,25,0.616,27,0.041,28,0.041,32,0.616,33,2.155,37,2.109,38,0.721,39,1.399,223,2.45,267,2.344,268,3.967,269,3.213,270,3.213]],["title/injectables/JwtStrategy.html",[165,1.437,189,1.116]],["body/injectables/JwtStrategy.html",[7,0.049,12,0.429,13,0.36,14,0.36,17,0.924,18,0.864,20,1.107,25,0.429,26,0.073,27,0.032,28,0.032,29,1.107,32,0.429,37,1.716,38,0.685,40,1.037,45,1.254,46,1.709,48,0.864,54,1.891,68,1.943,69,2.531,82,1.943,83,1.037,84,1.943,88,1.426,89,1.943,94,2.211,138,1.426,165,1.943,172,1.891,176,1.891,180,2.237,186,2.577,189,1.508,190,1.632,192,1.891,196,2.577,197,2.237,198,3.148,202,3.048,220,3.048,221,1.891,223,2.374,224,2.237,226,2.237,229,1.891,231,2.237,237,1.891,240,3.048,271,2.237,272,3.764,273,2.762,274,3.764,275,2.762,276,2.762,277,2.762,278,2.762,279,2.762,280,2.762,281,2.762,282,2.762,283,2.762,284,2.762]],["title/classes/Users.html",[26,0.073,132,1.116]],["body/classes/Users.html",[7,0.048,12,0.499,13,0.42,14,0.42,17,0.585,25,0.717,26,0.11,27,0.036,28,0.036,30,1.461,32,0.499,33,1.891,34,2.888,38,0.889,39,1.512,40,1.273,45,1.891,46,1.461,48,1.006,49,2.202,51,1.901,54,2.202,55,2.606,83,1.394,132,1.669,169,1.661,285,2.202,286,3.465,287,3.218,288,3.218,289,3.218,290,2.606,291,3.218]],["title/controllers/UsersController.html",[56,1.437,292,1.646]],["body/controllers/UsersController.html",[7,0.049,12,0.187,13,0.157,14,0.157,16,1.181,17,0.65,18,0.376,25,0.187,26,0.032,27,0.017,28,0.017,32,0.187,34,2.943,38,0.543,39,1.134,40,0.913,46,0.546,48,0.934,56,0.621,58,0.621,60,0.973,61,2.096,67,2.076,68,1.031,72,1.711,79,3.108,80,2.683,82,1.711,83,1.29,84,1.711,85,2.715,88,2.125,89,1.846,94,2.589,95,1.755,97,1.515,107,2.683,108,2.683,109,0.973,110,1.618,111,2.895,113,0.973,114,0.71,122,1.958,126,0.973,130,3.212,132,1.433,133,2.076,138,1.711,176,0.823,254,2.344,292,1.181,293,0.973,294,1.998,295,1.998,296,1.998,297,1.618,298,1.618,299,1.618,300,1.618,301,2.563,302,0.973,303,3.889,304,1.202,305,4.246,306,4.246,307,4.246,308,1.202,309,1.998,310,1.202,311,1.618,312,2.563,313,2.563,314,2.076,315,2.563,316,1.998,317,2.563,318,2.563,319,2.563,320,2.563,321,1.202,322,1.998,323,0.973,324,1.202,325,2.563,326,1.202,327,3.575,328,3.314,329,3.575,330,1.202,331,1.202,332,1.202,333,2.563,334,2.986,335,0.973,336,1.202,337,1.202,338,1.998,339,1.618,340,1.202,341,1.202,342,1.202,343,1.202,344,2.683,345,2.563,346,2.986,347,1.202,348,1.202,349,1.202,350,1.202,351,3.314,352,0.973,353,0.973,354,0.823,355,1.504,356,0.973,357,1.202,358,1.202,359,1.202,360,1.202,361,2.563,362,1.202,363,1.202,364,1.998,365,1.202,366,1.202,367,2.986,368,1.998,369,1.202,370,1.202,371,1.998,372,1.202,373,1.202,374,1.202,375,1.202,376,1.202,377,1.202,378,1.618,379,1.202,380,1.202]],["title/modules/UsersModule.html",[0,1.264,8,1.437]],["body/modules/UsersModule.html",[0,1.867,2,1.431,3,1.867,6,2.341,7,0.049,8,2.749,9,2.43,10,1.863,11,1.863,12,0.489,13,0.411,14,0.411,16,2.43,17,0.938,18,0.986,19,2.158,20,1.263,25,0.489,26,0.083,27,0.035,28,0.035,58,2.122,83,0.868,132,1.263,167,3.329,169,2.122,187,2.553,188,1.863,292,2.704,354,2.158,355,2.341,356,2.553,381,2.553,382,2.553,383,3.153,384,3.153,385,3.153,386,3.153]],["title/injectables/UsersService.html",[189,1.116,355,1.264]],["body/injectables/UsersService.html",[7,0.049,12,0.444,13,0.184,14,0.184,17,0.655,18,0.44,20,0.564,25,0.219,26,0.037,27,0.019,28,0.019,32,0.219,34,3.03,38,0.655,39,1.201,40,1.062,45,0.639,46,1.917,48,1.205,61,1.491,68,1.174,69,2.878,79,3.134,82,1.99,83,1.356,84,1.99,85,1.557,88,2.363,89,1.99,94,2.773,95,1.557,97,1.344,103,1.557,122,2.278,132,1.444,138,1.695,188,1.344,189,0.911,190,0.832,192,0.964,196,1.557,198,2.248,201,2.919,219,1.14,221,0.964,225,1.842,229,2.777,237,1.557,247,1.842,254,1.861,286,0.964,297,1.842,298,1.842,299,1.842,300,1.842,302,1.842,303,3.778,311,1.842,323,1.842,335,1.842,339,2.66,344,1.842,352,1.14,353,1.14,354,0.964,355,1.033,378,1.842,387,1.14,388,2.274,389,1.408,390,1.408,391,2.274,392,1.408,393,1.408,394,2.274,395,2.274,396,3.855,397,3.855,398,3.855,399,2.274,400,1.408,401,2.274,402,2.274,403,2.274,404,1.408,405,2.274,406,1.408,407,2.861,408,2.861,409,1.842,410,1.408,411,1.408,412,2.861,413,1.408,414,1.408,415,1.408,416,2.274,417,1.408,418,1.408,419,1.408,420,2.861,421,3.605,422,1.408,423,2.274,424,1.408,425,1.408,426,1.408,427,1.14,428,1.408,429,1.408,430,1.408,431,1.408,432,1.408]],["title/coverage.html",[433,2.591]],["body/coverage.html",[7,0.048,14,0.396,26,0.131,27,0.034,28,0.034,29,1.218,31,2.748,38,0.553,47,1.796,48,0.951,56,2.072,57,1.796,59,2.462,71,1.569,115,1.38,132,1.218,142,2.462,143,2.462,165,1.569,169,1.569,189,1.801,191,2.462,223,1.569,254,1.569,255,2.462,256,2.462,258,2.081,259,2.462,267,1.796,269,2.462,270,2.462,271,2.462,285,2.748,292,1.796,293,2.462,355,1.38,387,2.462,427,4.372,433,2.081,434,3.04,435,3.04,436,3.04,437,4.015,438,3.04,439,3.04,440,3.04,441,3.04,442,4.495,443,3.04,444,4.015,445,4.495,446,2.462,447,3.04,448,2.462,449,3.04,450,3.04,451,3.04,452,3.04,453,3.04,454,3.04,455,3.04]],["title/dependencies.html",[3,1.519,456,2.333]],["body/dependencies.html",[3,1.648,7,0.049,18,1.135,20,1.454,26,0.118,27,0.038,28,0.038,45,1.648,114,2.144,157,2.144,222,2.939,457,4.886,458,3.629,459,3.629,460,3.629,461,4.496,462,3.629,463,3.629,464,3.629,465,3.629,466,3.629,467,3.629,468,3.629,469,3.629,470,3.629,471,3.629,472,3.629,473,3.629,474,3.629,475,3.629,476,3.629,477,3.629]],["title/miscellaneous/functions.html",[478,1.379,479,2.709]],["body/miscellaneous/functions.html",[7,0.042,27,0.042,28,0.042,32,0.661,446,3.446,448,4.236,478,2.515,479,3.446,480,4.256]],["title/index.html",[32,0.362,481,2.333,482,2.333]],["body/index.html",[7,0.048,13,0.402,27,0.035,28,0.035,61,1.398,433,2.108,483,3.08,484,3.08,485,4.049,486,3.08,487,3.08,488,3.08,489,3.08,490,3.08,491,3.08,492,4.524,493,3.08,494,3.08,495,3.08,496,3.08,497,5.223,498,3.08,499,3.08,500,3.08,501,5.124,502,3.08,503,3.08,504,4.049,505,3.08,506,3.08,507,3.08,508,3.08,509,4.049,510,4.049,511,3.08,512,3.08,513,3.08,514,4.049,515,4.049,516,3.08,517,3.08,518,3.08,519,3.08,520,3.08,521,2.494,522,3.08,523,3.08,524,3.08,525,3.08,526,3.08,527,3.08,528,3.08,529,3.08,530,3.08,531,3.08,532,3.08,533,3.08,534,3.08,535,3.08,536,3.08,537,3.08,538,3.08,539,3.08]],["title/modules.html",[2,1.718]],["body/modules.html",[1,2.427,2,1.864,6,1.864,7,0.041,8,2.12,27,0.041,28,0.041,521,4.174,540,5.154,541,5.154,542,5.154]],["title/overview.html",[543,3.065]],["body/overview.html",[1,3.101,2,1.529,3,1.948,4,2.727,5,2.727,6,2.475,7,0.047,8,2.753,9,2.535,10,1.99,11,1.99,27,0.037,28,0.037,30,1.529,58,1.739,115,2.143,162,2.727,163,2.727,164,2.727,165,2.753,190,1.99,267,1.99,314,2.727,355,2.143,381,2.727,382,2.727,543,2.727,544,4.29,545,3.368,546,3.368]],["title/miscellaneous/variables.html",[478,1.379,547,2.709]],["body/miscellaneous/variables.html",[7,0.047,27,0.038,28,0.038,31,2.437,32,0.553,35,1.838,36,2.437,37,1.427,38,0.922,39,1.438,47,2.625,48,1.389,49,3.041,50,2.883,51,2.997,52,3.922,53,2.437,83,0.981,169,2.293,263,3.598,285,2.437,286,2.437,290,2.883,409,3.598,478,2.104,547,2.883,548,3.56,549,3.56]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":546,"title":{},"body":{"overview.html":{}}}],["100",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["11000",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["1234512345",{"_index":318,"title":{},"body":{"controllers/UsersController.html":{}}}],["2",{"_index":545,"title":{},"body":{"overview.html":{}}}],["2/3",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":544,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["3000/users",{"_index":312,"title":{},"body":{"controllers/UsersController.html":{}}}],["3000/users/1",{"_index":329,"title":{},"body":{"controllers/UsersController.html":{}}}],["3000/users/5",{"_index":333,"title":{},"body":{"controllers/UsersController.html":{}}}],["3600",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["39;mintu&#39",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["39;mintu123456&#39",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["4.1.6",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":314,"title":{},"body":{"controllers/UsersController.html":{},"overview.html":{}}}],["5.0.1",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["5.1.4",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["6.0.12",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["9.0.1",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":398,"title":{},"body":{"injectables/UsersService.html":{}}}],["accesstoken",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["added",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["address",{"_index":319,"title":{},"body":{"controllers/UsersController.html":{}}}],["amazing",{"_index":522,"title":{},"body":{"index.html":{}}}],["apicreatedresponse",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiforbiddenresponse",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation({summary",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":266,"title":{},"body":{"classes/GetUserFilterDto.html":{}}}],["apitags",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":499,"title":{},"body":{"index.html":{}}}],["applications",{"_index":491,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":29,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["auth.controller",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":57,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentialsdto",{"_index":71,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdata",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["authentication",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":532,"title":{},"body":{"index.html":{}}}],["authschema",{"_index":47,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":115,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":523,"title":{},"body":{"index.html":{}}}],["basic",{"_index":294,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(userpass",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["body(validationpipe",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["bootstrap",{"_index":448,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":542,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":540,"title":{},"body":{"modules.html":{}}}],["building",{"_index":486,"title":{},"body":{"index.html":{}}}],["catch",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["changed",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":26,"title":{"classes/Auth.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"classes/Users.html":{}},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":30,"title":{},"body":{"classes/Auth.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"classes/Users.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":381,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":383,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":382,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["complete",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["complete'})@apiforbiddenresponse({description",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["connection",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["const",{"_index":46,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(authdata",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["constructor(userdata",{"_index":389,"title":{},"body":{"injectables/UsersService.html":{}}}],["controller",{"_index":56,"title":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["correct",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":433,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":311,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["created.'})@apiforbiddenresponse({description",{"_index":308,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser",{"_index":297,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":302,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":254,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto,req",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["credentials",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["crediantial.dto",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["crediantial.dto.ts",{"_index":143,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["crediantial.dto.ts:14",{"_index":149,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["crediantial.dto.ts:9",{"_index":151,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["crud",{"_index":295,"title":{},"body":{"controllers/UsersController.html":{}}}],["data",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.map((prod",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["decorators",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":263,"title":{},"body":{"classes/GetUserFilterDto.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":40,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":327,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('/:id')@apiokresponse({description",{"_index":324,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":328,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletes",{"_index":394,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":298,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('id",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyid(id",{"_index":323,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserFilterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["development",{"_index":500,"title":{},"body":{"index.html":{}}}],["disable",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["display",{"_index":339,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["displayed",{"_index":338,"title":{},"body":{"controllers/UsersController.html":{}}}],["displays",{"_index":313,"title":{},"body":{"controllers/UsersController.html":{}}}],["documentation",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/auth",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":511,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":487,"title":{},"body":{"index.html":{}}}],["email",{"_index":315,"title":{},"body":{"controllers/UsersController.html":{}}}],["error",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.code",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["example",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["exisit",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["express",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":54,"title":{},"body":{"classes/Auth.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{}}}],["extractjwt",{"_index":278,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":53,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["following",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["forbidden",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["forbidden.'})@post('/signup",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["forbidden.'})@usepipes(validationpipe",{"_index":309,"title":{},"body":{"controllers/UsersController.html":{}}}],["format",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["found",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":485,"title":{},"body":{"index.html":{}}}],["function",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":479,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id')@apiokresponse({description",{"_index":331,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apiokresponse({description",{"_index":336,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":481,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":299,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyid(@req",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":399,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(req",{"_index":330,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserfilterdto",{"_index":258,"title":{"classes/GetUserFilterDto.html":{}},"body":{"classes/GetUserFilterDto.html":{},"coverage.html":{}}}],["getusers",{"_index":300,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers(@req",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(req",{"_index":335,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["given",{"_index":403,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":518,"title":{},"body":{"index.html":{}}}],["hash",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpass",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(password",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["here",{"_index":529,"title":{},"body":{"index.html":{}}}],["herein",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":536,"title":{},"body":{"index.html":{}}}],["id",{"_index":34,"title":{},"body":{"classes/Auth.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["id}).where('ownerid').equals(req.id",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(result.deletedcount",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["import",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["importing",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["imports",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["incripted",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":32,"title":{"index.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":396,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":189,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["injectmodel('auth",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["injectmodel('users",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["input",{"_index":402,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["installation",{"_index":496,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":498,"title":{},"body":{"index.html":{}}}],["interface",{"_index":267,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":268,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["internalservererrorexception",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":152,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{}}}],["isoptional",{"_index":265,"title":{},"body":{"classes/GetUserFilterDto.html":{}}}],["isoptional()@isnotempty()@apiproperty({type",{"_index":261,"title":{},"body":{"classes/GetUserFilterDto.html":{}}}],["isstring",{"_index":153,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(20",{"_index":150,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isstring()@minlength(8)@maxlength(20)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":144,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["join",{"_index":525,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["jwt.strategy",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":223,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":165,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":533,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":391,"title":{},"body":{"injectables/UsersService.html":{}}}],["keyword",{"_index":262,"title":{},"body":{"classes/GetUserFilterDto.html":{}}}],["license",{"_index":539,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":515,"title":{},"body":{"index.html":{}}}],["list",{"_index":306,"title":{},"body":{"controllers/UsersController.html":{}}}],["matches",{"_index":154,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":161,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matching",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":155,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(20",{"_index":159,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["message",{"_index":147,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["metadata",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":156,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(5",{"_index":158,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8",{"_index":160,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["mintu",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["mintu123456",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["miscellaneous",{"_index":478,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":514,"title":{},"body":{"index.html":{}}}],["mm@g.com",{"_index":316,"title":{},"body":{"controllers/UsersController.html":{}}}],["mode",{"_index":504,"title":{},"body":{"index.html":{}}}],["model",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb+srv://mintuuserdatabase7454:7454939169@cluster0.esxfi.mongodb.net/usersdata?retrywrites=true&w=majority",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":45,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.document",{"_index":55,"title":{},"body":{"classes/Auth.html":{},"classes/Users.html":{}}}],["mongoose.schema",{"_index":49,"title":{},"body":{"classes/Auth.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":528,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":534,"title":{},"body":{"index.html":{}}}],["name",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":492,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":538,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["nestjs/mongoose",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["nestjs/platform",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"classes/GetUserFilterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":48,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":484,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":497,"title":{},"body":{"index.html":{}}}],["null",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["open",{"_index":516,"title":{},"body":{"index.html":{}}}],["operations",{"_index":296,"title":{},"body":{"controllers/UsersController.html":{}}}],["optional",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":543,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["ownerid",{"_index":286,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":456,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":334,"title":{},"body":{"controllers/UsersController.html":{}}}],["param{createuserdto",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["param{number",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["param{string",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["passport",{"_index":279,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":276,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":280,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":35,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["passwordvalidate",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordvalidate(password",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/:id')@apiokresponse({description",{"_index":341,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":270,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["phone",{"_index":317,"title":{},"body":{"controllers/UsersController.html":{}}}],["please",{"_index":526,"title":{},"body":{"index.html":{}}}],["post",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('/signin",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apicreatedresponse({description",{"_index":304,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres'})@apicreatedresponse({description",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["present",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prettier/prettier",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["private",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["prod.id",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["prod.name",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["prod.ownerid",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["production",{"_index":506,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":483,"title":{},"body":{"index.html":{}}}],["project",{"_index":517,"title":{},"body":{"index.html":{}}}],["promise",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":33,"title":{},"body":{"classes/Auth.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/Users.html":{}}}],["providers",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["put",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["quot;mintu&quot",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["read",{"_index":527,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":495,"title":{},"body":{"index.html":{}}}],["req",{"_index":303,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["req.id",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["req.user",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["require",{"_index":52,"title":{},"body":{"classes/Auth.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":290,"title":{},"body":{"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":305,"title":{},"body":{"controllers/UsersController.html":{}}}],["result",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["result.filter((prod",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["result.id",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["results",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["returened",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["returened.'})@apiforbiddenresponse({description",{"_index":325,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":322,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["routes",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":501,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":36,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":488,"title":{},"body":{"index.html":{}}}],["schema",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/user.schema",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["search",{"_index":260,"title":{},"body":{"classes/GetUserFilterDto.html":{}}}],["secret",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":284,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":489,"title":{},"body":{"index.html":{}}}],["service",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["side",{"_index":490,"title":{},"body":{"index.html":{}}}],["signin",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(authcredentialsdto",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body(validationpipe",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(authcredentialsdto",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["single",{"_index":395,"title":{},"body":{"injectables/UsersService.html":{}}}],["source",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":401,"title":{},"body":{"injectables/UsersService.html":{}}}],["sponsors",{"_index":520,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.entity.ts",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":15,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":385,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:49",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:66",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:82",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":142,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":269,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":271,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:11",{"_index":273,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":275,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/user.entity.ts",{"_index":31,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/user.entity.ts:10",{"_index":41,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/user.entity.ts:11",{"_index":44,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/user.entity.ts:12",{"_index":42,"title":{},"body":{"classes/Auth.html":{}}}],["src/auth/user.entity.ts:13",{"_index":43,"title":{},"body":{"classes/Auth.html":{}}}],["src/main.ts",{"_index":446,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/users.filter.dto.ts",{"_index":259,"title":{},"body":{"classes/GetUserFilterDto.html":{},"coverage.html":{}}}],["src/users/dto/users.filter.dto.ts:13",{"_index":264,"title":{},"body":{"classes/GetUserFilterDto.html":{}}}],["src/users/schemas/user.schema",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":285,"title":{},"body":{"classes/Users.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/schemas/user.schema.ts:10",{"_index":288,"title":{},"body":{"classes/Users.html":{}}}],["src/users/schemas/user.schema.ts:11",{"_index":289,"title":{},"body":{"classes/Users.html":{}}}],["src/users/schemas/user.schema.ts:9",{"_index":287,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.controller.ts",{"_index":293,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:119",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":337,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":310,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:84",{"_index":332,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:99",{"_index":326,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":384,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":387,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:22",{"_index":404,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:33",{"_index":400,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":393,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:70",{"_index":392,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":390,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":502,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":505,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":507,"title":{},"body":{"index.html":{}}}],["started",{"_index":482,"title":{"index.html":{}},"body":{}}],["starter",{"_index":494,"title":{},"body":{"index.html":{}}}],["statements",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["stay",{"_index":530,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":277,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":39,"title":{},"body":{"classes/Auth.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string,req",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["successfully",{"_index":307,"title":{},"body":{"controllers/UsersController.html":{}}}],["such",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":281,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":521,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":541,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{}}}],["test",{"_index":510,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":513,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":512,"title":{},"body":{"index.html":{}}}],["tests",{"_index":509,"title":{},"body":{"index.html":{}}}],["testuser",{"_index":291,"title":{},"body":{"classes/Users.html":{}}}],["thanks",{"_index":519,"title":{},"body":{"index.html":{}}}],["this.authdata",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authdata.findone",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(authcredentialsdto",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.getuserbyid(id,req",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashpassword(password",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordvalidate(user.password",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userdata({name",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userdata.deleteone({id",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userdata.find().exec",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userdata.findbyid(id).where('ownerid').equals(req.id",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.deleteuserbyid(id",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getuserbyid(id",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getusers(req.user",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updateuser(id",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validateuserpassword(authcredentialsdto",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["tnew",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["topsecret51",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":531,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":51,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"classes/Users.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["trying",{"_index":397,"title":{},"body":{"injectables/UsersService.html":{}}}],["twitter",{"_index":537,"title":{},"body":{"index.html":{}}}],["type",{"_index":38,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":493,"title":{},"body":{"index.html":{}}}],["ui",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":50,"title":{},"body":{"classes/Auth.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":508,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["update",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated.'})@apiforbiddenresponse({description",{"_index":342,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser",{"_index":388,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserbyid",{"_index":301,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserbyid(id",{"_index":340,"title":{},"body":{"controllers/UsersController.html":{}}}],["use",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(authguard('jwt",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["usepipes",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["usepipes(validationpipe",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:5",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.name",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.salt",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.username",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":37,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["usernames",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["username}\"already",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpass",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":132,"title":{"classes/Users.html":{}},"body":{"controllers/AuthController.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":386,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"classes/Users.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":292,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":8,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":355,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate",{"_index":272,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":274,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuserpassword",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserpassword(authcredentialsdto",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["validator",{"_index":157,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserFilterDto.html":{},"dependencies.html":{}}}],["value",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":547,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":503,"title":{},"body":{"index.html":{}}}],["way",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["weak",{"_index":148,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["website",{"_index":535,"title":{},"body":{"index.html":{}}}],["x6d;&#109;&#64;&#103;&#46;&#99;&#x6f;&#x6d",{"_index":321,"title":{},"body":{"controllers/UsersController.html":{}}}],["xyz",{"_index":320,"title":{},"body":{"controllers/UsersController.html":{}}}],["you'd",{"_index":524,"title":{},"body":{"index.html":{}}}],["z",{"_index":146,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["z])(?=.*[a",{"_index":145,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    MongooseModule.forRoot(\n      'mongodb+srv://MintuUserDataBase7454:7454939169@cluster0.esxfi.mongodb.net/usersData?retryWrites=true&w=majority',\n    ),\n    AuthModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        salt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as mongoose from 'mongoose';\nexport const AuthSchema = new mongoose.Schema({\n    userName: { type: String, unique: true, require: true},\n    password: { type: String, require: true},\n    salt: {type: String, require: false},\n});\n\nexport class Auth extends mongoose.Document {\n    id: string;\n    userName: string;\n    password: string;\n    salt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Authentication routes such as signin, signup are present in this class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authcredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n                    Signin using the following format:\nUsing existing data\nuserName: 'Mintu',\npassword: 'Mintu123456'\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authcredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Using existing data\nuserName: &#39;Mintu&#39;,\npassword: &#39;Mintu123456&#39;\n                        \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        AccessToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authcredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'SignUp Route', description: 'New user is created and put in database - herein postgres'})@ApiCreatedResponse({description: 'Signup complete'})@ApiForbiddenResponse({description: 'Forbidden.'})@Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authcredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport {\n  Body,\n  Controller,\n  Post,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { ApiCreatedResponse, ApiForbiddenResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { AuthCredentialsDto } from './DTO/auth-crediantial.dto';\n/**\n * Authentication routes such as signin, signup are present in this class\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  /**\n   * We import Auth Service\n   * @param authService importing is done this way\n   */\n  constructor(private authservice: AuthService) {}\n  @ApiOperation({\n    summary: 'SignUp Route',\n    description:\n      'New user is created and put in database - herein postgres',\n  })\n  @ApiCreatedResponse({\n    description: 'Signup complete',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  /**\n   * TNew users are added using auth service\n   * @example\n   * Use the following format to insert username and password\n   * username: 'Mintu',\n   * password: 'Mintu123456'\n   */\n  @Post('/signup')\n  async signUp(@Body(ValidationPipe) authcredentialsDto: AuthCredentialsDto) {\n    return this.authservice.signUp(authcredentialsDto);\n  }\n  /**\n   * Signin using the following format:\n   * @example\n   * Using existing data\n   * userName: 'Mintu',\n   * password: 'Mintu123456'\n   * @returns AccessToken\n   */\n  @Post('/signin')\n  async signIn(\n    @Body(ValidationPipe) authcredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    return this.authservice.signIn(authcredentialsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/DTO/auth-crediantial.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                UserName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'password too weak'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/DTO/auth-crediantial.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/DTO/auth-crediantial.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, Matches, MaxLength, MinLength } from 'class-validator';\n\nexport class AuthCredentialsDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(20)\n  UserName: string;\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/,{ message: 'password too weak'})\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n// import { UserSchema } from 'src/users/schemas/user.schema';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AuthSchema } from './user.entity';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\n@Module({\n  imports: [\n    JwtModule.register({\n      secret: 'topSecret51',\n      signOptions: {\n        expiresIn: 3600,\n      },\n    }),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    MongooseModule.forFeature([{ name: 'Auth', schema: AuthSchema }]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Private\n                                    Async\n                                PasswordValidate\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Private\n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(AuthData: Model, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            userdata and JwtService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        AuthData\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                jwtService.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n                    hashpassword\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user password\n\n                                    \n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        salt method\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        incripted password\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        PasswordValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    PasswordValidate(password: string, salt: string, UserPass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n                    password validation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user password\n\n                                    \n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        salt method\n\n                                    \n                                \n                                \n                                    UserPass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Returns true if password is correct else false\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n                    SignIn .\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        username and password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Accesstoken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:82\n                \n            \n\n\n            \n                \n                    Signup method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        username and password DTO.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        usernames.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateUserPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { AuthCredentialsDto } from './DTO/auth-crediantial.dto';\nimport { Auth } from './user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayload } from './jwt-payload.interface';\n@Injectable()\nexport class AuthService {\n  /**\n   * userdata and JwtService.\n   * @param userdata database schema connection\n   * @param jwtService jwtService.\n   */\n  constructor(\n    @InjectModel('Auth')\n    private AuthData: Model,\n    private jwtService: JwtService,\n  ) {}\n  /**\n   * hashpassword\n   * @param password user password\n   * @param salt salt method\n   * @returns incripted password\n   */\n  private async hashPassword(password: string, salt: string) {\n    return bcrypt.hash(password, salt);\n  }\n  /**\n   * password validation\n   * @param password user password\n   * @param salt salt method\n   * @returns Returns true if password is correct else false\n   */\n  private async PasswordValidate(\n    password: string,\n    salt: string,\n    UserPass: string,\n  ): Promise {\n    const hash = await bcrypt.hash(UserPass, salt);\n    return hash === password;\n  }\n  private async validateUserPassword(authCredentialsDto: AuthCredentialsDto) {\n    const { UserName, password } = authCredentialsDto;\n    const user = await this.AuthData.findOne({ userName: UserName });\n    if (\n      user &&\n      (await this.PasswordValidate(user.password, user.salt, password))\n    ) {\n      return user.userName;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * SignIn .\n   * @param authCredentialsDto username and password\n   * @returns Accesstoken\n   */\n  async signIn(\n    authCredentialsDto: AuthCredentialsDto,\n  ): Promise {\n    const userName = await this.validateUserPassword(authCredentialsDto);\n    if (!userName) {\n      throw new UnauthorizedException('Invalid Credentials');\n    }\n    const payload: JwtPayload = { userName };\n    const accessToken = await this.jwtService.sign(payload);\n    return { accessToken };\n  }\n  /**\n   * Signup method\n   * @param authCredentialsDto username and password DTO.\n   * @returns usernames.\n   */\n  async signUp(authCredentialsDto: AuthCredentialsDto) {\n    const { UserName, password } = authCredentialsDto;\n    const salt = await bcrypt.genSalt();\n    const hashPass = await this.hashPassword(password, salt);\n    const user = new this.AuthData({\n      userName: UserName,\n      password: hashPass,\n      salt: salt,\n    });\n    try {\n      await user.save();\n    } catch (error) {\n      if (error.code === 11000) {\n        throw new NotFoundException(\n          `User with UserName => \"${UserName}\"already exisit`,\n        );\n      } else {\n        throw new InternalServerErrorException();\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/Dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        Name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Dto/create-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nexport class CreateUserDto {\n  @IsNotEmpty()\n  Name: string;\n\n}\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserFilterDto.html":{"url":"classes/GetUserFilterDto.html","title":"class - GetUserFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/Dto/users.filter.Dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty()@ApiProperty({type: String, description: 'The search Keyword', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/Dto/users.filter.Dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class GetUserFilterDto {\n    \n    @IsOptional()\n    @IsNotEmpty()\n    @ApiProperty({\n        type: String,\n        description: 'The search Keyword',\n        default: '',\n      })\n    search: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  userName: string;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(AuthData: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        AuthData\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Model } from 'mongoose';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { JwtPayload } from './jwt-payload.interface';\nimport { Auth } from './user.entity';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n  @InjectModel('Auth')\n  private AuthData: Model) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'topSecret51',\n    });\n  }\n  async validate(payload: JwtPayload): Promise {\n    const { userName } = payload;\n    const user = await this.AuthData.findOne({ userName: userName });\n    if (!user) {\n        throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users.html":{"url":"classes/Users.html","title":"class - Users","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                ownerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/schemas/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as mongoose from 'mongoose';\nexport const UserSchema = new mongoose.Schema({\n    name: { type: String, required: true },\n    ownerId: String,\n});\n\nexport class Users extends mongoose.Document {\n    id: string;\n    name: string;\n    ownerId: string;\n}\n// export class TestUser {\n//     id: string;\n//     name: string;\n//     ownerId: string;\n// }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Basic CRUD operations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createUser\n                            \n                            \n                                deleteUserById\n                            \n                            \n                                getUserById\n                            \n                            \n                                getUsers\n                            \n                            \n                                updateUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createUser\n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto: CreateUserDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({description: 'the resource list has been successfully created.'})@ApiForbiddenResponse({description: 'Forbidden.'})@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n                    Create new user\nData added in Database\nPost : 3000/users\ndisplays:\nid: 5,\nname: mintu,\nemail: mm@g.com,\nphone: 1234512345,\naddress: XYZ.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Data added in Database\nPost : 3000/users\ndisplays:\nid: 5,\nname: mintu,\nemail: &#x6d;&#109;&#64;&#103;&#46;&#99;&#x6f;&#x6d;,\nphone: 1234512345,\naddress: XYZ.\n                        \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        User data created is returned\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \ndeleteUserById(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOkResponse({description: 'the resource list has been successfully returened.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:99\n                \n            \n\n\n            \n                \n                    Delete an user\nUser if present, deleted\nDelete: 3000/users/1\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        to be deleted\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            User if present, deleted\nDelete: 3000/users/1\n                        \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserById\n                        \n                    \n                \n            \n            \n                \ngetUserById(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOkResponse({description: 'the resource list has been successfully returened.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:84\n                \n            \n\n\n            \n                \n                    User with ID\nUser ID as Param\n3000/users/5\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        as params\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            User ID as Param\n3000/users/5\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user data of params\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n            \n                \ngetUsers(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'the resource list has been successfully returened.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:46\n                \n            \n\n\n            \n                \n                    \nall users displayed\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        -This will display all the users data .\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserById\n                        \n                    \n                \n            \n            \n                \nupdateUserById(id: string, createUserDto: CreateUserDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOkResponse({description: 'the resource list has been successfully updated.'})@ApiForbiddenResponse({description: 'Forbidden.'})@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:119\n                \n            \n\n\n            \n                \n                    Update user data\nid and status to update\nPATCH: 3000/users/1\nBody: Name: \"Mintu\"\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        of user\n\n                                    \n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            id and status to update\nPATCH: 3000/users/1\nBody: Name: &quot;Mintu&quot;\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        new user data\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Req,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CreateUserDto } from './Dto/create-user.dto';\nimport { Users } from './schemas/user.schema';\nimport { UsersService } from './users.service';\n\n/**\n * Basic CRUD operations\n */\n@ApiTags('Users')\n@Controller('users')\n@UseGuards(AuthGuard('jwt'))\nexport class UsersController {\n  /**\n   * imports UsersService\n   * @param usersService This imports UsersService.\n   */\n  constructor(private userService: UsersService) {}\n  /**\n   * - all users displayed\n   * @returns -This will display all the users data .\n   */\n  @Get()\n  @ApiOkResponse({\n    description: 'the resource list has been successfully returened.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  getUsers(@Req() req) {\n    return this.userService.getUsers(req.user);\n  }\n  /**\n   * Create new user\n   * @returns User data created is returned\n   * @example\n   * Data added in Database\n   * Post : 3000/users\n   * displays:\n   * id: 5,\n   * name: mintu,\n   * email: mm@g.com,\n   * phone: 1234512345,\n   * address: XYZ.\n   */\n  @Post()\n  @ApiCreatedResponse({\n    description: 'the resource list has been successfully created.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  @UsePipes(ValidationPipe)\n  createUser(@Body() createUserDto: CreateUserDto, @Req() req) {\n    return this.userService.createUser(createUserDto, req.user);\n  }\n  /**\n   * User with ID\n   * @param{string} id as params\n   * @returns user data of params\n   * @example\n   * User ID as Param\n   * 3000/users/5\n   */\n  @Get('/:id')\n  @ApiOkResponse({\n    description: 'the resource list has been successfully returened.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  getUserById(@Req() req, @Param('id') id: string): Promise {\n    return this.userService.getUserById(id, req.user);\n  }\n  /**\n   * Delete an user\n   * @param{number} id to be deleted\n   * @example\n   * User if present, deleted\n   * Delete: 3000/users/1\n   */\n  @Delete('/:id')\n  @ApiOkResponse({\n    description: 'the resource list has been successfully returened.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  deleteUserById(@Param('id') id: string, @Req() req): Promise {\n    return this.userService.deleteUserById(id, req.user);\n  }\n  /**\n   * Update user data\n   * @param{string} id of user\n   * @param{createUserDto} Name to be updated name\n   * @returns new user data\n   * @example\n   * id and status to update\n   * PATCH: 3000/users/1\n   *\n   * Body: Name: \"Mintu\"\n   */\n  @Patch('/:id')\n  @ApiOkResponse({\n    description: 'the resource list has been successfully updated.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden.' })\n  @UsePipes(ValidationPipe)\n  updateUserById(\n    @Param('id') id: string,\n    @Body() createUserDto: CreateUserDto,\n    @Req() req,\n  ): Promise {\n    const { Name } = createUserDto;\n    return this.userService.updateUser(id, Name, req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UserSchema } from './schemas/user.schema';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    AuthModule,\n    MongooseModule.forFeature([{ name: 'Users', schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userdata: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            Userdata keeps info about all users\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userdata\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                database schema connection\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto, req)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:70\n                \n            \n\n\n            \n                \n                    create user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        id of created user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(id: string, req)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:46\n                \n            \n\n\n            \n                \n                    deletes single user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of user\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user information who is trying to access\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string, req)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:33\n                \n            \n\n\n            \n                \n                    Display specific user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User id as input\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user information who is trying to access\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        User data of given id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(req)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n                    display all user data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user information who is trying to access\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        Returns users\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: string, Name: string, req)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n                    update user data\nTakes user id\nnew name to be changed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    Name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Takes user id\nnew name to be changed\n                        \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        updated user value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateUserDto } from './Dto/create-user.dto';\nimport { Users } from './schemas/user.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n@Injectable()\nexport class UsersService {\n  /**\n   * Userdata keeps info about all users\n   * @param userdata database schema connection\n   */\n  constructor(\n    @InjectModel('Users')\n    private readonly userdata: Model,\n  ) {}\n  /**\n   * display all user data\n   * @param req user information who is trying to access\n   * @returns Returns users\n   */\n  async getUsers(req) {\n    const result = await this.userdata.find().exec();\n    const data = await result.filter((prod) => prod.ownerId === req.id );\n    return data.map((prod)=> ({id: prod.id, name: prod.name}));\n  }\n  /**\n   * Display specific user data\n   * @param id User id as input\n   * @param req user information who is trying to access\n   * @returns User data of given id\n   */\n  async getUserById(id: string,req): Promise {\n    const found = await this.userdata.findById(id).where('ownerId').equals(req.id);\n\n    if (!found) {\n      throw new NotFoundException(`User with ID \"${id}\" not found`);\n    }\n    return found;\n  }\n  /**\n   * deletes single user\n   * @param id id of user\n   * @param req user information who is trying to access\n   */\n  async deleteUserById(id: string,req): Promise {\n    const result = await this.userdata.deleteOne({id: id}).where('ownerId').equals(req.id);\n    if(result.deletedCount === 0)\n    {\n      throw new NotFoundException(`User with ID \"${id}\" not found`);\n    }\n  }\n  /**\n   * update user data\n   * @example\n   * Takes user id\n   * new name to be changed\n   * @returns updated user value\n   */\n  async updateUser(id: string, Name: string,req): Promise {\n    const user = await this.getUserById(id,req);\n    user.name = Name;\n    await user.save();\n    return user;\n  }\n  /**\n   * create user data\n   * @returns id of created user\n   */\n  async createUser(createUserDto: CreateUserDto,req) {\n    const { Name } = createUserDto;\n    const user = new this.userdata({name: Name, ownerId: req.id});\n    const result = await user.save();\n    return result.id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/DTO/auth-crediantial.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/auth/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/user.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/user.entity.ts\n            \n            variable\n            AuthSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/Dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/Dto/users.filter.Dto.ts\n            \n            class\n            GetUserFilterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            class\n            Users\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                85 %\n                (6/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/mongoose : ^9.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.1.4\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            mongoose : ^6.0.12\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.1.6\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthSchema   (src/.../user.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema({\n    userName: { type: String, unique: true, require: true},\n    password: { type: String, require: true},\n    salt: {type: String, require: false},\n})\n                    \n                \n\n\n        \n    \n\n    src/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema({\n    name: { type: String, required: true },\n    ownerId: String,\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
